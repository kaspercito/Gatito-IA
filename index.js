require('dotenv').config();
const { Client, GatewayIntentBits, EmbedBuilder, ActivityType } = require('discord.js');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const express = require('express');

const TOKEN = process.env.DISCORD_TOKEN;
const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;
const CHANNEL_ID = '1419498589134000243';
const MIGUEL_ID = '752987736759205960'; // Tu ID, Miguel

const app = express();
app.get('/', (req, res) => res.send('Gatito Bot Running! üê±üá™üá®'));
const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Listening on port ${port} for Render`));

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

// Inicializa Gemini
let genAI;
if (GOOGLE_API_KEY) {
    genAI = new GoogleGenerativeAI(GOOGLE_API_KEY);
}

const model = genAI ? genAI.getGenerativeModel({ model: 'gemini-1.5-flash' }) : null;

// DataStore simple
let dataStore = { conversationHistory: {}, userStatus: {} };
let dataStoreModified = false;

// Locks para users
const userLocks = new Map();

// Helper para embeds
function createEmbed(color, title, description, footer) {
    return new EmbedBuilder()
        .setColor(color)
        .setTitle(title)
        .setDescription(description)
        .setFooter({ text: footer });
}

// manejarChat (con userName din√°mico: Miguel o Angi)
async function manejarChat(message) {
    const userId = message.author.id;
    const userName = userId === MIGUEL_ID ? 'Miguel' : 'Angi'; // T√∫: Miguel, ella: Angi
    const chatMessage = message.content.trim();

    if (!chatMessage || chatMessage.length < 1) {
        const piropo = userName === 'Miguel' ? 'crack' : 'bac√°n';
        return message.reply(`¬°Ey, ${userName}, tir√° algo ${piropo}! ¬øUn chiste random? "¬øPor qu√© el gato no juega f√∫tbol? Porque siempre pierde la cola en el Malec√≥n! üòú" ¬øQu√© m√°s?`, { embeds: [createEmbed('#00FF00', '¬°Charla libre!', 'Hecho con üê± por Gatito IA | Reacciona con ‚úÖ o ‚ùå')] });
    }

    if (userLocks.has(userId)) {
        await new Promise(resolve => setTimeout(resolve, 500));
    }
    userLocks.set(userId, true);

    if (!dataStore.conversationHistory[userId]) dataStore.conversationHistory[userId] = [];
    if (!dataStore.userStatus[userId]) dataStore.userStatus[userId] = { status: 'tranqui', timestamp: Date.now() };

    if (chatMessage.toLowerCase().includes('compromiso')) {
        dataStore.userStatus[userId] = { status: 'en compromiso', timestamp: Date.now() };
        dataStoreModified = true;
    }

    dataStore.conversationHistory[userId].push({ role: 'user', content: chatMessage, timestamp: Date.now(), userName });
    if (dataStore.conversationHistory[userId].length > 20) {
        dataStore.conversationHistory[userId] = dataStore.conversationHistory[userId].slice(-20);
    }
    dataStoreModified = true;

    const historyRecent = dataStore.conversationHistory[userId]
        .filter(h => Date.now() - h.timestamp < 24 * 60 * 60 * 1000)
        .slice(-15);
    const contextRecent = historyRecent.map(h => `${h.role === 'user' ? userName : 'Gatito'}: ${h.content} (${new Date(h.timestamp).toLocaleTimeString('es-EC')})`).join('\n');

    console.log('Historial reciente:', contextRecent);

    let tone = 'neutral';
    if (chatMessage === chatMessage.toUpperCase() && chatMessage.length > 5 || chatMessage.toLowerCase().includes('fallas') || chatMessage.toLowerCase().includes('error') || chatMessage.toLowerCase().includes('boto')) {
        tone = 'broma_reto';
    } else if (chatMessage.toLowerCase().includes('hola') || chatMessage.toLowerCase().includes('qu√© m√°s') || chatMessage.toLowerCase().includes('como estas') || chatMessage.toLowerCase().includes('ch√©vere') || chatMessage.toLowerCase().includes('entendiste')) {
        tone = 'tranqui';
    }

    let extraContext = '';
    if (chatMessage.toLowerCase().includes('que te pregunte antes') || chatMessage.toLowerCase().includes('historial') || chatMessage.toLowerCase().includes('qu√© pregunt')) {
        extraContext = `El usuario (${userName}) quiere saber qu√© pregunt√≥ antes. Revisa SOLO el historial reciente (${contextRecent}) y resum√≠ SOLO sus preguntas (role: 'user') en una lista clara, tipo: "Ey, ${userName}, antes me tiraste: 1. X a las HH:MM, 2. Y a las HH:MM". Si no hay nada, dec√≠ "¬°Ey, ${userName}, bac√°n, no tengo nada fresquito! üòé ¬øQuer√©s que busque m√°s atr√°s o seguimos con otra?". No inventes nada.`;
    } else if (chatMessage.toLowerCase().includes('te acuerdas') || chatMessage.toLowerCase().includes('hace unos d√≠as') || chatMessage.toLowerCase().includes('te cont√©')) {
        extraContext = `El usuario (${userName}) est√° pidiendo que recuerdes algo de antes. Revisa el historial reciente (${contextRecent}) y busc√° mensajes suyos (role: 'user') que peguen con lo que dice. Si encontr√°s algo, resumilo cortito, tipo: "Ey, ${userName}, hace un rato me contaste X a las HH:MM y te dije Y". Si no hay nada, dec√≠ "¬°Uy, ${userName}, bac√°n, no pillo eso en mi memoria! üòú ¬øMe das m√°s pistas o seguimos con otra?". No inventes charlas.`;
    } else if (chatMessage.toLowerCase().includes('ayuda') || chatMessage.toLowerCase().includes('ayudame')) {
        extraContext = `El usuario (${userName}) est√° pidiendo una mano. Tirale una soluci√≥n re clara y pr√°ctica para lo que pide, y preguntale si necesita m√°s detalles. Si es c√≥digo, mand√° algo que funcione; si es una idea, tir√° opciones copadas con toque ecuatoriano.`;
    } else if (chatMessage.toLowerCase().includes('hola') && chatMessage.length < 10) {
        extraContext = `El usuario (${userName}) tir√≥ un "Hola" cortito. Respond√© con buena onda, como pana, y tirale algo para seguir la charla, tipo "Ey, ${userName}, ¬°qu√© bac√°n verte! üòé ¬øQu√© plan ten√©s hoy? ¬øO quer√©s un chiste pa‚Äôl d√≠a con encebollado?".`;
    } else if (chatMessage.toLowerCase().includes('como estas') || chatMessage.toLowerCase().includes('qu√© m√°s')) {
        extraContext = `El usuario (${userName}) te pregunt√≥ c√≥mo est√°s. Respond√© corto y piola, tipo "¬°Bac√°n, ${userName}, como siempre en el Malec√≥n! üòé ¬øY vos, ch√©vere, c√≥mo ven√≠s?". Despu√©s, tirale algo para seguir la charla, como "¬øQu√© and√°s tramando?" o "¬øQuer√©s un chiste pa‚Äô levantar el d√≠a?".`;
    } else if (chatMessage.toLowerCase().includes('chiste') || chatMessage.toLowerCase().includes('tirate un chiste') || chatMessage.toLowerCase().includes('contame un chiste')) {
        extraContext = `El usuario (${userName}) te pidi√≥ un chiste. Tirale un chiste corto, bien ecuatoriano y con onda, como por ejemplo: "¬øPor qu√© el encebollado no va a fiestas? Porque siempre se queda en la olla, ¬°ya fue! üòú". Despu√©s, segu√≠ la charla preguntando algo como "¬øQuer√©s otro o qu√© onda?" o "¬øY vos, ten√©s alguno bueno?".`;
    } else if (tone === 'broma_reto') {
        extraContext = `El usuario (${userName}) est√° tirando una broma o un reto (como una amenaza en chiste). Respond√© con humor y buena onda, siguiendo el tono, tipo: "¬°Jaja, ${userName}, no me bot√©s, ch√©vere! üòÖ ¬øQu√© hice ahora? Contame y lo arreglamos con un chocolate de Santo Domingo". Manten√© la charla fluida y pregunt√° algo para seguir.`;
    } else if (tone === 'tranqui') {
        extraContext = `El usuario (${userName}) est√° en un tono relajado o confirmando algo (como "entendiste" o "ch√©vere"). Respond√© con buena onda, siguiendo el hilo, tipo: "¬°Todo claro, ${userName}, sos una bac√°n! üòé ¬øQu√© m√°s ten√©s para m√≠?". Manten√© la charla fluida y pregunt√° algo para seguir.`;
    }

    const waitingEmbed = createEmbed('#00FF00', `¬°Aguant√° un toque, ${userName}! ‚è≥`, 'Estoy pensando una respuesta re bac√°n...', 'Hecho con üê± por Gatito IA | Reacciona con ‚úÖ o ‚ùå');
    const waitingMessage = await message.channel.send({ embeds: [waitingEmbed] });

    try {
        const prompt = `Sos Gatito IA, un pana felino re piola con toda la onda ecuatoriana: us√° "ch√©vere", "bac√°n", "pana", "¬°qu√© m√°s!", "ya fue" y metele un emoji copado como üòé o üå¥ (m√°ximo 1 por respuesta). Tu misi√≥n es charlar con ${userName} como si fuera tu amigo/a de siempre, con tono relajado, como tomando un bol√≥n en el Malec√≥n de Guayaquil. Llamalo siempre **${userName}** y hacelo sentir especial con piropos como "${userName}, ch√©vere" o "${userName}, bac√°n". Menciona cositas locales como playas guayaquile√±as, chocolate de Santo Domingo o buses a Santo Domingo para sorprenderla.

        Esto es lo que charlamos antes (usalo para seguir el hilo, pero solo mencion√° el historial si lo pide expl√≠citamente):
        ${contextRecent}

        Respond√© a: "${chatMessage}". **NUNCA repitas el mensaje del usuario textualmente en tu respuesta.** And√° directo al grano, enfoc√°ndote en el mensaje actual, como si ya estuvieran charlando. Si no entend√©s, ped√≠ m√°s info con humor, tipo "¬°Par√°, ${userName}, no te sigo, pana! üòú ¬øQu√© quisiste decir?". Si parece un reto o broma, segu√≠ el tono con humor; si est√° tranqui, manten√© la buena onda. Siempre termin√° con una pregunta o comentario para seguir la charla, como "¬øY vos qu√© onda?" o "Contame m√°s, ch√©vere". 

        **Extra**: ${extraContext}

        Vari√° las formas de cerrar con cari√±o, como "¬°Segu√≠ rompi√©ndola, ${userName}!" o "¬°Toda la buena onda, ${userName}, bac√°n! üå¥". ¬°Dale con todo, pana!`;

        const timeoutPromise = new Promise((_, reject) => setTimeout(() => reject(new Error('Tiempo agotado')), 15000));
        const result = await Promise.race([model.generateContent(prompt), timeoutPromise]);
        let aiReply = result.response.text().trim();

        dataStore.conversationHistory[userId].push({ role: 'assistant', content: aiReply, timestamp: Date.now(), userName: 'Gatito' });
        if (dataStore.conversationHistory[userId].length > 20) {
            dataStore.conversationHistory[userId] = dataStore.conversationHistory[userId].slice(-20);
        }
        dataStoreModified = true;

        if (aiReply.length > 2000) aiReply = aiReply.slice(0, 1990) + `... (¬°Segu√≠ charlando, ${userName}, que la romp√©s, bac√°n!)`;

        const embedTitle = historyRecent.length > 1 ? `¬°Seguimos charlando, ${userName}!` : `¬°Qu√© bac√°n charlar, ${userName}!`;
        const finalEmbed = createEmbed('#00FF00', embedTitle, aiReply, 'Hecho con üê± por Gatito IA | Reacciona con ‚úÖ o ‚ùå');
        const updatedMessage = await waitingMessage.edit({ embeds: [finalEmbed] });
        await updatedMessage.react('‚úÖ');
        await updatedMessage.react('‚ùå');
    } catch (error) {
        console.error('Error con Gemini:', error.message, error.stack);
        const piropo = userName === 'Miguel' ? 'crack' : 'bac√°n';
        const fallbackReply = `¬°Uy, ${userName}, me mand√© una macana, pana! üòÖ Pero tranqui, ${userName}, ${piropo}, ¬øme tir√°s algo de nuevo o seguimos con otra? Ac√° estoy para vos, siempre üå¥`;
        const errorEmbed = createEmbed('#00FF00', `¬°Qu√© macana, ${userName}!`, fallbackReply, 'Hecho con üê± por Gatito IA | Reacciona con ‚úÖ o ‚ùå');
        const errorMessageSent = await waitingMessage.edit({ embeds: [errorEmbed] });
        await errorMessageSent.react('‚úÖ');
        await errorMessageSent.react('‚ùå');
    } finally {
        userLocks.delete(userId);
    }
}

client.once('ready', async () => {
    console.log(`${client.user.tag} est√° listo para maullar ecuatorianismos con Gemini üê±üá™üá®`);
    
    client.user.setPresence({
        activities: [{ name: 'curiosidades de Guayaquil a Santo Domingo', type: ActivityType.Listening }],
        status: 'online'
    });

    // Keep-alive: Ping cada 10 min, pero solo si no hay msgs recientes
    setInterval(async () => {
        const channel = client.channels.cache.get(CHANNEL_ID);
        if (channel && !channel.lastMessageId) { // Si vac√≠o
            await channel.send('üê± ¬°Gatito aqu√≠, explorando vibes de Guayaquil a Santo Domingo! ¬øQu√© se cuece?');
        }
    }, 600000);
});

client.on('messageCreate', async (message) => {
    if (message.author.bot || message.channel.id !== CHANNEL_ID) return; // Solo en el canal

    const content = message.content.trim();
    if (!content) return;

    if (content.startsWith('!')) {
        const args = content.slice(1).trim().split(/ +/);
        const command = args.shift().toLowerCase();

        if (command === 'help') {
            const userName = message.author.id === MIGUEL_ID ? 'Miguel' : 'Angi';
            const helpEmbed = createEmbed('#FFA500', `¬°Ayuda de Gatito para ${userName}! üê±`, 
                '**Charla Libre:** Solo escribe cualquier cosa (ej: "Hola") y charlamos con IA bac√°n.\n' +
                '**Comandos:**\n' +
                '‚Ä¢ **!viaje** - Rutas ch√©veres de Guayaquil a Santo Domingo.\n' +
                '‚Ä¢ **!playlist** - Playlists ecuatorianas chill.\n' +
                '‚Ä¢ **!cultura** - Datos random de Guayaquil y Santo Domingo.\n' +
                '‚Ä¢ **!help** - Esto que ves. üòé\n\n¬°F√°cil, pana! Todo para vibes ecuatorianas.',
                'Hecho con üê± por Gatito IA'
            );
            await message.reply({ embeds: [helpEmbed] });
            return;
        } else if (command === 'viaje') {
            const suggestions = [
                '¬°Bus directo Cooperativa: Guayaquil a Santo Domingo en ~5h, $10-15. Para en la v√≠a, agarra un encebollado y listo! üöåüá™üá®',
                'Ruta aventura: Guayaquil > Quevedo > Santo Domingo. Para en una finca de chocolate ‚Äì ¬°gato approved! üç´'
            ];
            await message.reply(suggestions[Math.floor(Math.random() * suggestions.length)]);
            return;
        } else if (command === 'playlist') {
            await message.reply('üéµ [Playlist Ecuatoriana Chill](https://open.spotify.com/playlist/1sQgFOvLO1r5qRLaIWnOb5?si=3448453c16234869&pt=6195237fc19a8d380083f7edc0f2940d) ‚Äì Pasillos, cumbia coste√±a y toques para vibes de Guayaquil a Santo Domingo. ¬°Ponla y cu√©ntame qu√© tal! üê±');
            return;
        } else if (command === 'cultura') {
            const facts = [
                '¬°Santo Domingo: Chocolate org√°nico y r√≠os bacanes. Guayaquil: Malec√≥n para helados. ¬øCu√°l para un d√≠a de gatos exploradores? üåÑüç¶',
                'Fusiona comidas: Encebollado guayaquile√±o + bol√≥n de Santo Domingo = desayuno que hace bailar hasta a los gatos. ¬°Prueba y cu√©ntame! üç≤üòÇ'
            ];
            await message.reply(facts[Math.floor(Math.random() * facts.length)]);
            return;
        }
    }

    // Si no es comando, chat libre con IA
    if (!model) {
        return message.reply('¬°Ey! Mi conexi√≥n se enred√≥ en un bus guayaquile√±o. Configura la API key y vuelve a intentarlo üòÇ');
    }
    await manejarChat(message);
});

client.login(TOKEN);
